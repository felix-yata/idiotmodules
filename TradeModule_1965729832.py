from .. import loader, utils
import asyncio
import re

class TradeModule(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    strings = {"name": "TradeModule"}

    async def client_ready(self, client, db):
        self.client = client
        self.running = False

    async def tradecmd(self, message):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å"""
        self.running = True
        target_user_id = 5443619563
        await message.edit("üèÅ –¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—É—â–µ–Ω–∞.")
        while self.running:
            response = await self.wait_for_response(target_user_id)
            if response:
                min_sell, max_buy = await self.parse_exchange(response)
                if min_sell is not None and max_buy is not None:
                    if min_sell - max_buy < 0.02:
                        await asyncio.sleep(2.5)
                        await self.client.send_message(
                            target_user_id, f".–ë–∏—Ä–∂–∞ –ø—Ä–æ–¥–∞—Ç—å 99999 {min_sell:.2f}")
                        await asyncio.sleep(2.5)
                        await self.client.send_message(
                            target_user_id, f".–ë–∏—Ä–∂–∞ –∫—É–ø–∏—Ç—å 99999 {max_buy + 0.01:.2f}")
                    if min_sell - max_buy < 0.03:
                        await asyncio.sleep(2.5)
                        await self.client.send_message(
                            target_user_id, f".–ë–∏—Ä–∂–∞ –ø—Ä–æ–¥–∞—Ç—å 99999 {min_sell:.2f}")
                        await asyncio.sleep(2.5)
                        await self.client.send_message(
                            target_user_id, f".–ë–∏—Ä–∂–∞ –∫—É–ø–∏—Ç—å 99999 {max_buy + 0.01:.2f}")
                    else:
                        await asyncio.sleep(2.5)
                        await self.client.send_message(
                            target_user_id, f".–ë–∏—Ä–∂–∞ –ø—Ä–æ–¥–∞—Ç—å 99999 {min_sell - 0.01:.2f}")
                        await asyncio.sleep(2.5)
                        await self.client.send_message(
                            target_user_id, f".–ë–∏—Ä–∂–∞ –∫—É–ø–∏—Ç—å 99999 {max_buy + 0.01:.2f}")
                else:
                    await message.respond("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö.")
            else:
                await message.respond("‚ö†Ô∏è –ù–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –±–∏—Ä–∂–∏.")
            await asyncio.sleep(600)
    async def purcmd(self, message):
        """–ü–æ–∫—É–ø–∞–µ—Ç –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–µ –ø–æ–∫—É–ø–∫–∏"""
        target_user_id = 5443619563
        await message.edit("ü§ë –©–∞ –∫—É–ø–ª—é")
        response = await self.wait_for_response(target_user_id)
        if response:
            min_sell, max_buy = await self.parse_exchange(response)
            if min_sell is not None and max_buy is not None:
                if min_sell - max_buy < 0.02:
                    await asyncio.sleep(2.5)
                    await self.client.send_message(
                        target_user_id, f".–ë–∏—Ä–∂–∞ –∫—É–ø–∏—Ç—å 9999 {max_buy}")
                else:
                    await asyncio.sleep(2.5)
                    await self.client.send_message(
                        target_user_id, f".–ë–∏—Ä–∂–∞ –∫—É–ø–∏—Ç—å 9999 {max_buy + 0.01:.2f}")
            else:
                await message.respond("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö.")
        else:
            await message.respond("‚ö†Ô∏è –ù–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –±–∏—Ä–∂–∏.")
    async def sellcmd(self, message):
        """–ü—Ä–æ–¥–∞–µ—Ç –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–µ –ø—Ä–æ–¥–∞–∂–∏"""
        target_user_id = 5443619563
        await message.edit("ü§ë –©–∞ –ø—Ä–æ–¥–∞–º")
        response = await self.wait_for_response(target_user_id)
        if response:
            min_sell, max_buy = await self.parse_exchange(response)
            if min_sell is not None and max_buy is not None:
                if min_sell - max_buy < 0.02:
                    await asyncio.sleep(2.5)
                    await self.client.send_message(
                        target_user_id, f".–ë–∏—Ä–∂–∞ –ø—Ä–æ–¥–∞—Ç—å 9999 {min_sell}")
                else:
                    await asyncio.sleep(2.5)
                    await self.client.send_message(
                        target_user_id, f".–ë–∏—Ä–∂–∞ –ø—Ä–æ–¥–∞—Ç—å 9999 {min_sell - 0.01:.2f}")
            else:
                await message.respond("‚ö†Ô∏è –ù–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –±–∏—Ä–∂–∏.")
            await asyncio.sleep(54)
    async def stoptradecmd(self, message):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å"""
        target_user_id = 2314759542
        await self.client.send_message(target_user_id, ".–ë–∏—Ä–∂–∞ –æ—Ç–º–µ–Ω–∞ –≤—Å–µ")
        self.running = False
        await message.edit("üõë –¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

    async def parse_exchange(self, message):
        text = message.message
        text = text.replace(',', '.').replace('\xa0', ' ')
        sell_section = re.search(r"üîΩ –ó–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É([\s\S]*?)üîº –ó–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É", text)
        buy_section = re.search(r"üîº –ó–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É([\s\S]*)", text)

        min_sell = None
        max_buy = None

        if sell_section:
            sell_prices = re.findall(r"(\d+\.\d+) –∏—Ä–∏—Å–æ–∫", sell_section.group(1))
            sell_prices = [float(price) for price in sell_prices]
            if sell_prices:
                min_sell = min(sell_prices)

        if buy_section:
            buy_prices = re.findall(r"(\d+\.\d+) –∏—Ä–∏—Å–æ–∫", buy_section.group(1))
            buy_prices = [float(price) for price in buy_prices]
            if buy_prices:
                max_buy = max(buy_prices)

        return min_sell, max_buy

    async def wait_for_response(self, user_id):
        try:
            async with self.client.conversation(user_id, timeout=30) as conv:
                await conv.send_message("–ë–∏—Ä–∂–∞ –æ—Ç–º–µ–Ω–∞ –≤—Å–µ")
                await asyncio.sleep(2.5)
                await conv.send_message("–±–∏—Ä–∂–∞")
                response = await conv.get_response()
                return response
        except asyncio.TimeoutError:
            return None
