# meta pic: https://static.whypodg.me/mods!stablediffusion.png
# meta banner: https://mods.whypodg.me/badges/stablediffusion.jpg
# meta developer: @idiotcoders
# scope: hikka_only
# scope: hikka_min 1.6.2

import json
import re
import requests
import datetime

from hikkatl.types import Message
from .. import loader, utils


@loader.tds
class StableDiffusionMod(loader.Module):
	"""Some mod for work with StableDiffusion. API KEY required!"""
	strings = {
		"name": "StableDiffusion",
		"_cfg_api_key": "Insert the StableDiffusionApi.com API Key",
		"_cfg_model": "Pass the AI model",
		"_cfg_bad_prompt": "Pass the bad prompt ‚Äî is that what you don't want to see in the pic",
		"_cfg_debug": "Debug mode",
		"_cfg_samples": "Default quantity of images to generate",
		"_cfg_steps": "Steps ‚Äî The higher the number, the more the image will be detailed",
		"_cfg_upscale": "Using upscale",
		"error": "<emoji document_id=6325579261763651444>‚ö†</emoji> <b>Some error occured!</b>\n\n<code>{}</code>",
		"key_required": "<b>API Key required!</b> Insert it in <code>.cfg StableDiffusion</code>",
		"done": "<emoji document_id=5327958075158568158>‚úÖ</emoji> <b>Image is generated!</b>\n\n",
		"debug": "<b>Model:</b> <code>{model}</code>\n<b>Prompt:</b> <code>{prompt}</code>\n" \
				 "<b>Bad prompt:</b> <code>{negative}</code>\n<b>Steps:</b> <i>{steps}, {upsc}" \
				 "upscaled using external AI{time}</i>",
		"not": "not ",
		"drawing": "<emoji document_id=5431456208487716895>üé®</emoji> <b>Image is drawing...</b>",
		"help": "<emoji document_id=5325762745574891391>ü•π</emoji> <b>Help for</b> <code>StableDiffusion</code> <b>module</b>\n\n\n" \
				"<emoji document_id=5409309265460471937>1Ô∏è‚É£</emoji> <b>Configuration:</b>\nAll configuration in the config" \
				" - <code>.cfg StableDiffusion</code>\n\n\n<emoji document_id=5408970203562255606>2Ô∏è‚É£</emoji> <b>" \
				"Parameters and their description:</b>\n  <code>api_key</code> is your personal access key to StableDiffusionAPI.com, " \
				" you can get it <a href='https://stablediffusionapi.com/settings/api'>here</a>\n\n  <code>model</code> is the model to be generated (in config specifies which " \
				"models are available)\n\n  <code>bad_prompt</code> - negative input. It is needed in order to remove from your " \
				"images what you don't wanna see\n\n  <code>debug</code> - if value is <i>True</i>, the response will contain" \
				" information about the generated image(s) (model, prompt, bad_prompt, steps, etc.)\n  <code>samples</code> ‚Äî " \
				"number of images generated\n\n  <code>steps</code> are <i>¬´steps¬ª</i> . the higher the number, the more detailed" \
				" the image will be\n\n  <code>upscale</code> - improved generation using AI\n\n\n<emoji document_id=" \
				"5406784224122384435>3Ô∏è‚É£</emoji> <b>Usage:</b>\nLet's suppose that you have finished the setup. Let's move on to use.\n" \
				"You need to use it like this: <code>.sd</code> &lt;prompt&gt;\nWhere &lt;prompt&gt; is whatever you wanna see on " \
				"the image"
		}

	strings_ru = {
		"_cls_doc": "–ö–∞–∫–æ–π-—Ç–æ –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å StableDiffusion. –ù—É–∂–µ–Ω API KEY!",
		"_cfg_api_key": "–£–∫–∞–∂–∏ —Å–≤–æ–π API Key –æ—Ç StableDiffusionAPI.com",
		"_cfg_model": "–£–∫–∞–∂–∏ –º–æ–¥–µ–ª—å",
		"_cfg_bad_prompt": "–£–∫–∞–∂–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥ ‚Äî —Ç–æ, —á—Ç–æ —Ç—ã –Ω–µ —Ö–æ—á–µ—à—å –≤–∏–¥–µ—Ç—å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏",
		"_cfg_debug": "Debug –º–æ–¥",
		"_cfg_samples": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
		"_cfg_steps": "–®–∞–≥–∏ - —á–µ–º –≤—ã—à–µ —á–∏—Å–ª–æ, —Ç–µ–º –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª—å–Ω–µ–µ –±—É–¥–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.",
		"_cfg_upscale": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏—è",
		"error": "<emoji document_id=6325579261763651444>‚ö†</emoji> <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!</b>\n\n<code>{}</code>",
		"key_required": "<emoji document_id=6325579261763651444>‚ö†</emoji> <b>–ù—É–∂–µ–Ω API Key!</b> –£–∫–∞–∂–∏ –µ–≥–æ –≤ <code>.cfg StableDiffusion</code>",
		"done": "<emoji document_id=5327958075158568158>‚úÖ</emoji> <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!</b>\n\n",
		"debug": "<b>–ú–æ–¥–µ–ª—å:</b> <code>{model}</code>\n<b>–í–≤–æ–¥:</b> <code>{prompt}</code>\n" \
				 "<b>–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥:</b> <code>{negative}</code>\n<b>–®–∞–≥–∏:</b> <i>{steps}, {upsc}" \
				 "—É–ª—É—á—à–µ–Ω–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò{time}</i>",
		"not": "–Ω–µ –±—ã–ª–æ ",
		"drawing": "<emoji document_id=5431456208487716895>üé®</emoji> <b>–†–∏—Å—É—é‚Ä¶</b>",
		"help": "<emoji document_id=5325762745574891391>ü•π</emoji> <b>–ü–æ–º–æ—â—å –ø–æ –º–æ–¥—É–ª—é </b><code>StableDiffusion</code>\n\n\n" \
				"<emoji document_id=5409309265460471937>1Ô∏è‚É£</emoji> <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞</b>.\n–í—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –≤ –∫–æ–Ω—Ñ–∏–≥–µ ‚Äî " \
				"<code>.cfg StableDiffusion</code>\n\n\n<emoji document_id=5408970203562255606>2Ô∏è‚É£</emoji> <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ" \
				":</b>\n  <code>api_key</code> ‚Äî —ç—Ç–æ –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –∫ StableDiffusionAPI.com, –µ–≥–æ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞" \
				" —ç—Ç–æ–º –∂–µ —Å–∞–π—Ç–µ\n\n  <code>model</code> ‚Äî —ç—Ç–æ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–≤ –∫–æ–Ω—Ñ–∏–≥–µ —É–∫–∞–∑–∞–Ω–æ, –∫–∞–∫–∏–µ –º–æ–¥–µ–ª–∏ –µ—Å—Ç—å)\n\n" \
				"  <code>bad_prompt</code> ‚Äî –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥. –æ–Ω –Ω—É–∂–µ–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Å –≤–∞—à–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ, " \
				"—á—Ç–æ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å\n\n  <code>debug</code> ‚Äî –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ <i>True</i>, –≤ –æ—Ç–≤–µ—Ç–µ –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" \
				" –æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º–æ–º(-—ã—Ö) –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏(-—è—Ö) (–º–æ–¥–µ–ª—å, prompt, bad_prompt, steps –∏ —Ç.–¥.)" \
				"\n\n  <code>samples</code> ‚Äî –∫–æ–ª-–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π" \
				"\n\n  <code>steps</code> ‚Äî —ç—Ç–æ <i>¬´—à–∞–≥–∏¬ª</i>. —á–µ–º –≤—ã—à–µ —á–∏—Å–ª–æ, —Ç–µ–º –¥–µ—Ç–∞–ª—å–Ω–µ–µ –±—É–¥–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" \
				"\n\n  <code>upscale</code> ‚Äî —É–ª—É—á—à–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –ò–ò" \
				"\n\n\n<emoji document_id=5406784224122384435>3Ô∏è‚É£</emoji> <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ</b> \n–ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É. " \
				"–ü–µ—Ä–µ–π–¥—ë–º –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.\n\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω—É–∂–Ω–æ —Ç–∞–∫: <code>.sd</code> &lt;prompt&gt;\n–ì–¥–µ &lt;prompt&gt; ‚Äî —á—Ç–æ —É–≥–æ–¥–Ω–æ" \
				", —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"
	}

	def __init__(self): # debug: bool, bad_prompt
		self.config = loader.ModuleConfig(
			loader.ConfigValue(
				"api_key",
				None,
				lambda: self.strings("_cfg_api_key"),
				validator=loader.validators.Hidden()
			),
			loader.ConfigValue(
				"model",
				"anything-v5",
				lambda: self.strings("_cfg_model"),
				validator=loader.validators.Choice([
					'abyssorangemix2nsfw', 'anything-v4', 'anything-v5',
					'anythingelse-v4', 'bro623jbfe32', 'cetusmix', 'cnwi74tjsdfw',
					'counterfeit-v20', 'counterfeit-v30', 'dark-sushi-25d',
					'disillusionmix', 'grapefruit-nsfw-anim', 'hanfu',
					'hc-a-mecha-musume-a', 'hc-kokkoro', 'hc-kyoka', 'hc-sailor-mercury',
					'majicmixfantasy', 'meinamix', 'meinapastel', 'night-sky-yozora-sty',
					'tmnd-mix', 'troi4bwiyt4', 'ttksuperspirit'
				])
			),
			loader.ConfigValue(
				"bad_prompt",
				(
					"(bad_prompt:0.8), multiple persons, multiple views, extra hands,"
					" ugly, lowres, bad quality, blurry, disfigured, extra limbs,"
					" missing limbs, deep fried, cheap art, missing fingers, out of"
					" frame, cropped, bad art, face hidden, text, speech bubble,"
					" stretched, bad hands, error, extra digit, fewer digits, worst"
					" quality, low quality, normal quality, mutated, mutation,"
					" deformed, severed, dismembered, corpse, pubic, poorly drawn,"
					" (((deformed hands))), (((more than two hands))), (((deformed"
					" body))), ((((mutant)))), painting, extra fingers, mutated hands,"
					" poorly drawn hands, poorly drawn face, bad anatomy, bad"
					" proportions, cloned face, skinny, glitchy, double torso,"
					" extra arms, mangled fingers, missing lips, distorted face,"
					" extra legs"
				),
				lambda: self.strings("_cfg_bad_prompt"),
			),
			loader.ConfigValue(
				"debug",
				False,
				lambda: self.strings("_cfg_debug"),
				validator=loader.validators.Boolean()
			),
			loader.ConfigValue(
				"samples",
				1,
				lambda: self.strings("_cfg_samples"),
				validator=loader.validators.Integer(minimum=1, maximum=4),
			),
			loader.ConfigValue(
				"steps",
				30,
				lambda: self.strings("_cfg_steps"),
				validator=loader.validators.Integer(minimum=1, maximum=50),
			),
			loader.ConfigValue(
				"upscale",
				False,
				lambda: self.strings("_cfg_upscale"),
				validator=loader.validators.Boolean()
			)
		)


	async def getFetch(self, url):
		payload = json.dumps({"key": self.config['api_key']})
		headers = {"Content-Type": "application/json"}
		r = (await utils.run_sync(
			requests.post,
			url,
			headers=headers,
			data=payload
		)).json()

		if r.get('status') == "success":
			return r['output']
		else:
			return (await self.getFetch(url))


	@loader.command(
		ru_doc="‚Äî –ø–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –º–æ–¥—É–ª—è",
		alias="sdh"
	)
	async def sdhelpcmd(self, message: Message):
		"""‚Äî help on using and configure the module"""
		await utils.answer(
			message,
			response=self.strings['help']
		)


	@loader.command(
		ru_doc="<prompt> ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º StableDiffusion API."
	)
	async def sdcmd(self, message: Message):
		"""<prompt> ‚Äî generate an image using StableDiffusion API"""
		if not self.config['api_key']:
			await utils.answer(
				message,
				self.strings['key_required']
			)
			return

		await utils.answer(
			message,
			response=self.strings['drawing']
		)
		prompt = utils.get_args_raw(message)

		url =  "https://stablediffusionapi.com/api/v3/dreambooth"
		payload = json.dumps({ 
			"key": self.config['api_key'],
			"model_id": self.config['model'],
			"prompt": prompt,
			"negative_prompt": self.config['bad_prompt'],
			"width": "512",
			"height": "512",
			"samples": self.config['samples'],
			"num_inference_steps": self.config['steps'],
			"safety_checker": "no",
			"enhance_prompt": "yes",
			"seed": None,
			"guidance_scale": 7.5,
			"multi_lingual": "no",
			"panorama": "no",
			"self_attention": "no",
			"upscale": "yes" if self.config['upscale'] else "no",
			"embeddings": "embeddings_model_id",
			"lora": "lora_model_id",
			"webhook": None,
			"track_id": None
		})
		headers = {
			"Content-Type": "application/json"
		}
		r = (await utils.run_sync(requests.post, url, headers=headers, data=payload)).json()

		if r.get('status') == "error":
			await utils.answer(
				message,
				response=self.strings['error'].format(r)
			)
			return

		if r.get('output'):
			out = self.strings['done']
			if self.config['debug']:
				out += self.strings['debug'].format(
					model=r['meta']['model_id'],
					prompt=r['meta']['prompt'],
					negative=r['meta']['negative_prompt'],
					steps=r['meta']['steps'],
					upsc=self.strings['not'] if not self.config['upscale'] else "",
					time=f", {round(r['generationTime'], 2)}s"
				)
			imgs = []
			for i in r['output']:
				img = (await utils.run_sync(
					requests.get,
					i
				)).content
				imgs.append(img)
			await utils.answer_file(
				message,
				file=imgs,
				caption=out
			)
		elif r.get('status') == "processing":
			out = self.strings['done']
			if self.config['debug']:
				out += self.strings['debug'].format(
					model=r['meta']['model_id'],
					prompt=r['meta']['prompt'],
					negative=r['meta']['negative_prompt'],
					steps=r['meta']['steps'],
					upsc=self.strings['not'] if not self.config['upscale'] else "",
					time=""
				)
			rr = await self.getFetch(r)
			imgs = []
			for i in rr['output']:
				img = (await utils.run_sync(
					requests.get,
					i
				)).content
				imgs.append(img)
			await utils.answer_file(
				message,
				file=imgs,
				caption=out
			)
		else:
			await utils.answer(
				message,
				response=self.strings['error'].format(r)
			)
